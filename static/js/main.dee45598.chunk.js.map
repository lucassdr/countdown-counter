{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","days","hours","minutes","seconds","distance","Date","getTime","Math","floor","setState","_this2","interval","setInterval","tick","clearInterval","react_default","a","createElement","className","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAIqBA,qBACpB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,KAAM,EAAGC,MAAO,EAAGC,QAAS,EAAGC,QAAS,GAFrCX,sEAMlB,IAIIY,EAJgB,IAAIC,KAAK,yBAAyBC,WAE5C,IAAID,MAAOC,UAIjBN,EAAOO,KAAKC,MAAMJ,EAAQ,OAC1BH,EAAQM,KAAKC,MACfJ,EAAQ,MAAT,MAEGF,EAAUK,KAAKC,MAAOJ,EAAQ,KAAT,KACrBD,EAAUI,KAAKC,MAAOJ,EAAQ,IAAkB,KAEpDT,KAAKc,SAAS,CACbT,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTC,QAASA,gDAIS,IAAAO,EAAAf,KACnBA,KAAKgB,SAAWC,YAAY,kBAAMF,EAAKG,QAAQ,oDAI/CC,cAAcnB,KAAKgB,2CAInB,OACCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,UACEtB,KAAKI,MAAMC,KADb,SACyB,GACvBL,KAAKI,MAAME,MAFb,UAE2B,GACzBN,KAAKI,MAAMG,QAHb,YAG+B,GAC7BP,KAAKI,MAAMI,QAJb,sBA1C4BmB,cCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.dee45598.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\n\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = { days: 0, hours: 0, minutes: 0, seconds: 0 }\n\t}\n\n\ttick() {\n\t\tlet countdownDate = new Date('Sep 29, 2020 18:45:00').getTime()\n\n\t\tlet now = new Date().getTime()\n\n\t\tlet distance = countdownDate - now\n\n\t\tlet days = Math.floor(distance / (1000 * 60 * 60 * 24))\n\t\tlet hours = Math.floor(\n\t\t\t(distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n\t\t)\n\t\tlet minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n\t\tlet seconds = Math.floor((distance % (1000 * 60)) / 1000)\n\n\t\tthis.setState({\n\t\t\tdays: days,\n\t\t\thours: hours,\n\t\t\tminutes: minutes,\n\t\t\tseconds: seconds\n\t\t})\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.interval = setInterval(() => this.tick(), 1000)\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.interval)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<h1>Contador Regressivo</h1>\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{this.state.days} dias {''}\n\t\t\t\t\t\t{this.state.hours} horas {''}\n\t\t\t\t\t\t{this.state.minutes} minutos {''}\n\t\t\t\t\t\t{this.state.seconds} segundos\n\t\t\t\t\t</h2>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}